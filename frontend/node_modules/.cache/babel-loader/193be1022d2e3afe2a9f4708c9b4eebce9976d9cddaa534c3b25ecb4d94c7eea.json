{"ast":null,"code":"var _jsxFileName = \"C:\\\\SpiritX_CrypticHackers_02\\\\frontend\\\\src\\\\Pages\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    role: 'bot',\n    content: 'Hi! I\\'m Spiriter, your cricket fantasy assistant. Ask me about players, stats, or request the best possible team!'\n  }]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [previousSearches, setPreviousSearches] = useState([]);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const [initialLoad, setInitialLoad] = useState(true);\n\n  // Auto-scroll to bottom of messages\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    // Only scroll if it's not the initial page load\n    if (!initialLoad) {\n      scrollToBottom();\n    } else {\n      setInitialLoad(false);\n    }\n  }, [messages, initialLoad]);\n\n  // Focus input when component loads\n  useEffect(() => {\n    var _inputRef$current;\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }, []);\n\n  // Suggested questions for the user\n  const suggestedQuestions = [\"Suggest the best possible team of 11 players\", \"Tell me about Chamika Chandimal's stats\", \"What is Wanindu Hasaranga's bowling economy?\", \"What university does Lahiru Rathnayake play for?\", \"What is the value of Bhanuka Rajapaksa?\"];\n\n  // Maintain a list of recent player searches to make easier to find\n  const updatePreviousSearches = messageText => {\n    // Extract player name using regex - basic version\n    const nameMatch = messageText.match(/about\\s+([a-zA-Z\\s]+)|player\\s+([a-zA-Z\\s]+)|([a-zA-Z\\s]+)'s\\s+stats/i);\n    if (nameMatch) {\n      const playerName = (nameMatch[1] || nameMatch[2] || nameMatch[3]).trim();\n      // Add to previous searches if not already there\n      setPreviousSearches(prev => {\n        if (!prev.includes(playerName) && playerName.length > 2) {\n          return [playerName, ...prev].slice(0, 5); // Keep only the 5 most recent\n        }\n        return prev;\n      });\n    }\n  };\n  const sendMessage = async (messageText = input) => {\n    if (!messageText.trim() || isLoading) return;\n\n    // Trim whitespace\n    messageText = messageText.trim();\n    const userMessage = {\n      role: 'user',\n      content: messageText\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    setError(null);\n\n    // Update recent searches\n    updatePreviousSearches(messageText);\n    try {\n      const response = await fetch('http://localhost:5000/api/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageText\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (!data.reply) {\n        throw new Error('No reply received from server');\n      }\n\n      // Format messages with line breaks preserved\n      const formattedReply = data.reply.replace(/\\n/g, '<br>');\n      const botMessage = {\n        role: 'bot',\n        content: formattedReply\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n\n      // Focus back on input after bot responds\n      setTimeout(() => {\n        var _inputRef$current2;\n        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.focus();\n      }, 100);\n    } catch (error) {\n      console.error('Chatbot Error:', error);\n      setError(error.message);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'bot',\n        content: `Sorry, I encountered an error. Please try again later.`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !isLoading) {\n      sendMessage();\n    }\n  };\n  const handleSuggestedQuestion = question => {\n    sendMessage(question);\n  };\n  const clearChat = () => {\n    setMessages([{\n      role: 'bot',\n      content: 'Hi! I\\'m Spiriter, your cricket fantasy assistant. Ask me about players, stats, or request the best possible team!'\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Spiriter Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), messages.length > 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-chat-button\",\n        onClick: clearChat,\n        disabled: isLoading,\n        children: \"Clear Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"chatbot-intro\",\n      children: \"Ask me about player stats, team recommendations, or anything about cricket fantasy!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chatbox ${messages.length > 3 ? 'expanded' : ''}`,\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === 'user' ? 'user-message' : 'bot-message',\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-role\",\n          children: msg.role === 'user' ? 'You' : 'Spiriter'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          dangerouslySetInnerHTML: {\n            __html: msg.content\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bot-message loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-role\",\n          children: \"Spiriter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-dots\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), messages.length <= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggested-questions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Try asking:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-container\",\n        children: suggestedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"question-button\",\n          onClick: () => handleSuggestedQuestion(question),\n          disabled: isLoading,\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), previousSearches.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"previous-searches\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Recent players:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searches-container\",\n        children: previousSearches.map((player, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-button\",\n          onClick: () => sendMessage(`Tell me about ${player}'s stats`),\n          disabled: isLoading,\n          children: player\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: \"Ask about players, stats or best team...\",\n        disabled: isLoading,\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: () => sendMessage(),\n        disabled: isLoading || !input.trim(),\n        children: isLoading ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"MNstv9Llq2ZY3PQWJ1N3jorGg0I=\");\n_c = Chatbot;\nfunction setupCricketBackground() {\n  // Create canvas element\n  const canvas = document.createElement('canvas');\n  canvas.className = 'background-canvas';\n  document.body.insertBefore(canvas, document.body.firstChild);\n\n  // Add the necessary CSS for the canvas\n  const style = document.createElement('style');\n  style.textContent = `\n        .background-canvas {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            z-index: -1;\n            background: #eaddf1;\n        }\n    `;\n  document.head.appendChild(style);\n  const ctx = canvas.getContext('2d');\n\n  // Set canvas dimensions\n  function resizeCanvas() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  }\n  resizeCanvas();\n  window.addEventListener('resize', resizeCanvas);\n\n  // Cricket elements\n  const elementsCount = 60;\n  const elements = [];\n  const cricketItems = ['🏏', '🏆', '⚾', '🧢']; // Cricket bat, trophy, ball, cap\n\n  // Mouse position\n  let mouse = {\n    x: null,\n    y: null,\n    radius: 100\n  };\n  class CricketElement {\n    constructor() {\n      this.x = Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height;\n      this.size = 15 + Math.random() * 10;\n      this.speedX = (Math.random() - 0.5) * 0.5;\n      this.speedY = (Math.random() - 0.5) * 0.5;\n      this.type = cricketItems[Math.floor(Math.random() * cricketItems.length)];\n      this.angle = 0;\n      this.spin = (Math.random() - 0.5) * 0.02;\n      this.opacity = 0.1 + Math.random() * 0.3;\n    }\n    update() {\n      // Move elements\n      this.x += this.speedX;\n      this.y += this.speedY;\n      this.angle += this.spin;\n\n      // Bounce off walls\n      if (this.x < 0 || this.x > canvas.width) this.speedX = -this.speedX;\n      if (this.y < 0 || this.y > canvas.height) this.speedY = -this.speedY;\n\n      // Mouse interaction\n      if (mouse.x !== null && mouse.y !== null) {\n        const dx = this.x - mouse.x;\n        const dy = this.y - mouse.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < mouse.radius) {\n          // Calculate angle to mouse\n          const angle = Math.atan2(dy, dx);\n          const force = (mouse.radius - distance) / mouse.radius * 2;\n\n          // Push elements away from mouse\n          this.x += Math.cos(angle) * force;\n          this.y += Math.sin(angle) * force;\n\n          // Increase spin when interacting with mouse\n          this.spin = this.spin * 1.05;\n          if (Math.abs(this.spin) > 0.2) {\n            this.spin = 0.2 * Math.sign(this.spin);\n          }\n        }\n      }\n    }\n    draw() {\n      ctx.save();\n      ctx.translate(this.x, this.y);\n      ctx.rotate(this.angle);\n      ctx.globalAlpha = this.opacity;\n      ctx.font = `${this.size}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(this.type, 0, 0);\n      ctx.restore();\n    }\n  }\n\n  // Create cricket elements\n  function createCricketElements() {\n    for (let i = 0; i < elementsCount; i++) {\n      elements.push(new CricketElement());\n    }\n  }\n\n  // Connection lines between elements\n  function drawConnections() {\n    const connectionDistance = 150;\n    ctx.lineWidth = 1;\n    for (let i = 0; i < elements.length; i++) {\n      for (let j = i + 1; j < elements.length; j++) {\n        const dx = elements[i].x - elements[j].x;\n        const dy = elements[i].y - elements[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < connectionDistance) {\n          // Opacity based on distance\n          const opacity = 1 - distance / connectionDistance;\n          ctx.beginPath();\n          ctx.moveTo(elements[i].x, elements[i].y);\n          ctx.lineTo(elements[j].x, elements[j].y);\n          ctx.strokeStyle = `rgba(83, 5, 118, ${opacity * 0.2})`;\n          ctx.stroke();\n        }\n      }\n    }\n  }\n\n  // Track mouse position\n  canvas.addEventListener('mousemove', function (e) {\n    mouse.x = e.x;\n    mouse.y = e.y;\n  });\n  canvas.addEventListener('mouseleave', function () {\n    mouse.x = null;\n    mouse.y = null;\n  });\n\n  // Animation loop\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawConnections();\n\n    // Update and draw elements\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].update();\n      elements[i].draw();\n    }\n    requestAnimationFrame(animate);\n  }\n  createCricketElements();\n  animate();\n}\n\n// Initialize the cricket background when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  setupCricketBackground();\n});\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","role","content","input","setInput","isLoading","setIsLoading","error","setError","previousSearches","setPreviousSearches","messagesEndRef","inputRef","initialLoad","setInitialLoad","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_inputRef$current","focus","suggestedQuestions","updatePreviousSearches","messageText","nameMatch","match","playerName","trim","prev","includes","length","slice","sendMessage","userMessage","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","statusText","data","json","reply","formattedReply","replace","botMessage","setTimeout","_inputRef$current2","console","handleKeyPress","e","key","handleSuggestedQuestion","question","clearChat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","msg","index","dangerouslySetInnerHTML","__html","ref","player","type","value","onChange","target","onKeyDown","placeholder","_c","setupCricketBackground","canvas","document","createElement","insertBefore","firstChild","style","textContent","head","appendChild","ctx","getContext","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","elementsCount","elements","cricketItems","mouse","x","y","radius","CricketElement","constructor","Math","random","size","speedX","speedY","floor","angle","spin","opacity","update","dx","dy","distance","sqrt","atan2","force","cos","sin","abs","sign","draw","save","translate","rotate","globalAlpha","font","textAlign","textBaseline","fillText","restore","createCricketElements","i","push","drawConnections","connectionDistance","lineWidth","j","beginPath","moveTo","lineTo","strokeStyle","stroke","animate","clearRect","requestAnimationFrame","$RefreshReg$"],"sources":["C:/SpiritX_CrypticHackers_02/frontend/src/Pages/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([\r\n        { role: 'bot', content: 'Hi! I\\'m Spiriter, your cricket fantasy assistant. Ask me about players, stats, or request the best possible team!' }\r\n    ]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [previousSearches, setPreviousSearches] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n    const inputRef = useRef(null);\r\n    const [initialLoad, setInitialLoad] = useState(true);\r\n\r\n    // Auto-scroll to bottom of messages\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Only scroll if it's not the initial page load\r\n        if (!initialLoad) {\r\n            scrollToBottom();\r\n        } else {\r\n            setInitialLoad(false);\r\n        }\r\n    }, [messages, initialLoad]);\r\n\r\n    // Focus input when component loads\r\n    useEffect(() => {\r\n        inputRef.current?.focus();\r\n    }, []);\r\n\r\n    // Suggested questions for the user\r\n    const suggestedQuestions = [\r\n        \"Suggest the best possible team of 11 players\",\r\n        \"Tell me about Chamika Chandimal's stats\",\r\n        \"What is Wanindu Hasaranga's bowling economy?\",\r\n        \"What university does Lahiru Rathnayake play for?\",\r\n        \"What is the value of Bhanuka Rajapaksa?\"\r\n    ];\r\n\r\n    // Maintain a list of recent player searches to make easier to find\r\n    const updatePreviousSearches = (messageText) => {\r\n        // Extract player name using regex - basic version\r\n        const nameMatch = messageText.match(/about\\s+([a-zA-Z\\s]+)|player\\s+([a-zA-Z\\s]+)|([a-zA-Z\\s]+)'s\\s+stats/i);\r\n        if (nameMatch) {\r\n            const playerName = (nameMatch[1] || nameMatch[2] || nameMatch[3]).trim();\r\n            // Add to previous searches if not already there\r\n            setPreviousSearches(prev => {\r\n                if (!prev.includes(playerName) && playerName.length > 2) {\r\n                    return [playerName, ...prev].slice(0, 5); // Keep only the 5 most recent\r\n                }\r\n                return prev;\r\n            });\r\n        }\r\n    };\r\n\r\n    const sendMessage = async (messageText = input) => {\r\n        if (!messageText.trim() || isLoading) return;\r\n\r\n        // Trim whitespace\r\n        messageText = messageText.trim();\r\n\r\n        const userMessage = { role: 'user', content: messageText };\r\n        setMessages(prevMessages => [...prevMessages, userMessage]);\r\n        setInput('');\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        // Update recent searches\r\n        updatePreviousSearches(messageText);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/chatbot', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ message: messageText })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Server error: ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (!data.reply) {\r\n                throw new Error('No reply received from server');\r\n            }\r\n\r\n            // Format messages with line breaks preserved\r\n            const formattedReply = data.reply.replace(/\\n/g, '<br>');\r\n            const botMessage = { role: 'bot', content: formattedReply };\r\n            setMessages(prevMessages => [...prevMessages, botMessage]);\r\n            \r\n            // Focus back on input after bot responds\r\n            setTimeout(() => {\r\n                inputRef.current?.focus();\r\n            }, 100);\r\n        } catch (error) {\r\n            console.error('Chatbot Error:', error);\r\n            setError(error.message);\r\n            setMessages(prevMessages => [...prevMessages, { \r\n                role: 'bot', \r\n                content: `Sorry, I encountered an error. Please try again later.` \r\n            }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !isLoading) {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const handleSuggestedQuestion = (question) => {\r\n        sendMessage(question);\r\n    };\r\n\r\n    const clearChat = () => {\r\n        setMessages([\r\n            { role: 'bot', content: 'Hi! I\\'m Spiriter, your cricket fantasy assistant. Ask me about players, stats, or request the best possible team!' }\r\n        ]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chatbot-header\">\r\n                <h2>Spiriter Chatbot</h2>\r\n                {messages.length > 3 && (\r\n                    <button \r\n                        className=\"clear-chat-button\" \r\n                        onClick={clearChat}\r\n                        disabled={isLoading}\r\n                    >\r\n                        Clear Chat\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            <p className=\"chatbot-intro\">\r\n                Ask me about player stats, team recommendations, or anything about cricket fantasy!\r\n            </p>\r\n            \r\n            <div className={`chatbox ${messages.length > 3 ? 'expanded' : ''}`}>\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={msg.role === 'user' ? 'user-message' : 'bot-message'}>\r\n                        <span className=\"message-role\">{msg.role === 'user' ? 'You' : 'Spiriter'}</span>\r\n                        <div \r\n                            className=\"message-content\" \r\n                            dangerouslySetInnerHTML={{ __html: msg.content }}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                {isLoading && <div className=\"bot-message loading\">\r\n                    <span className=\"message-role\">Spiriter</span>\r\n                    <div className=\"loading-dots\">\r\n                        <span></span><span></span><span></span>\r\n                    </div>\r\n                </div>}\r\n                <div ref={messagesEndRef} />\r\n            </div>\r\n            \r\n            {messages.length <= 3 && (\r\n                <div className=\"suggested-questions\">\r\n                    <h4>Try asking:</h4>\r\n                    <div className=\"questions-container\">\r\n                        {suggestedQuestions.map((question, index) => (\r\n                            <button \r\n                                key={index} \r\n                                className=\"question-button\"\r\n                                onClick={() => handleSuggestedQuestion(question)}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {question}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            \r\n            {previousSearches.length > 0 && (\r\n                <div className=\"previous-searches\">\r\n                    <h4>Recent players:</h4>\r\n                    <div className=\"searches-container\">\r\n                        {previousSearches.map((player, index) => (\r\n                            <button \r\n                                key={index} \r\n                                className=\"search-button\"\r\n                                onClick={() => sendMessage(`Tell me about ${player}'s stats`)}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {player}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            \r\n            <div className=\"input-container\">\r\n                <input \r\n                    type=\"text\" \r\n                    value={input} \r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyDown={handleKeyPress}\r\n                    placeholder=\"Ask about players, stats or best team...\"\r\n                    disabled={isLoading}\r\n                    ref={inputRef}\r\n                />\r\n                <button \r\n                    className=\"send-button\" \r\n                    onClick={() => sendMessage()}\r\n                    disabled={isLoading || !input.trim()}\r\n                >\r\n                    {isLoading ? 'Sending...' : 'Send'}\r\n                </button>\r\n            </div>\r\n            \r\n            {error && <div className=\"error-message\">Error: {error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction setupCricketBackground() {\r\n    // Create canvas element\r\n    const canvas = document.createElement('canvas');\r\n    canvas.className = 'background-canvas';\r\n    document.body.insertBefore(canvas, document.body.firstChild);\r\n\r\n    // Add the necessary CSS for the canvas\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n        .background-canvas {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            z-index: -1;\r\n            background: #eaddf1;\r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Set canvas dimensions\r\n    function resizeCanvas() {\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Cricket elements\r\n    const elementsCount = 60;\r\n    const elements = [];\r\n    const cricketItems = ['🏏', '🏆', '⚾', '🧢']; // Cricket bat, trophy, ball, cap\r\n\r\n    // Mouse position\r\n    let mouse = {\r\n        x: null,\r\n        y: null,\r\n        radius: 100\r\n    };\r\n\r\n    class CricketElement {\r\n        constructor() {\r\n            this.x = Math.random() * canvas.width;\r\n            this.y = Math.random() * canvas.height;\r\n            this.size = 15 + Math.random() * 10;\r\n            this.speedX = (Math.random() - 0.5) * 0.5;\r\n            this.speedY = (Math.random() - 0.5) * 0.5;\r\n            this.type = cricketItems[Math.floor(Math.random() * cricketItems.length)];\r\n            this.angle = 0;\r\n            this.spin = (Math.random() - 0.5) * 0.02;\r\n            this.opacity = 0.1 + Math.random() * 0.3;\r\n        }\r\n\r\n        update() {\r\n            // Move elements\r\n            this.x += this.speedX;\r\n            this.y += this.speedY;\r\n            this.angle += this.spin;\r\n\r\n            // Bounce off walls\r\n            if (this.x < 0 || this.x > canvas.width) this.speedX = -this.speedX;\r\n            if (this.y < 0 || this.y > canvas.height) this.speedY = -this.speedY;\r\n\r\n            // Mouse interaction\r\n            if (mouse.x !== null && mouse.y !== null) {\r\n                const dx = this.x - mouse.x;\r\n                const dy = this.y - mouse.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n                \r\n                if (distance < mouse.radius) {\r\n                    // Calculate angle to mouse\r\n                    const angle = Math.atan2(dy, dx);\r\n                    const force = (mouse.radius - distance) / mouse.radius * 2;\r\n                    \r\n                    // Push elements away from mouse\r\n                    this.x += Math.cos(angle) * force;\r\n                    this.y += Math.sin(angle) * force;\r\n                    \r\n                    // Increase spin when interacting with mouse\r\n                    this.spin = this.spin * 1.05;\r\n                    if (Math.abs(this.spin) > 0.2) {\r\n                        this.spin = 0.2 * Math.sign(this.spin);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        draw() {\r\n            ctx.save();\r\n            ctx.translate(this.x, this.y);\r\n            ctx.rotate(this.angle);\r\n            ctx.globalAlpha = this.opacity;\r\n            ctx.font = `${this.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillText(this.type, 0, 0);\r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n    // Create cricket elements\r\n    function createCricketElements() {\r\n        for (let i = 0; i < elementsCount; i++) {\r\n            elements.push(new CricketElement());\r\n        }\r\n    }\r\n\r\n    // Connection lines between elements\r\n    function drawConnections() {\r\n        const connectionDistance = 150;\r\n        \r\n        ctx.lineWidth = 1;\r\n        \r\n        for (let i = 0; i < elements.length; i++) {\r\n            for (let j = i + 1; j < elements.length; j++) {\r\n                const dx = elements[i].x - elements[j].x;\r\n                const dy = elements[i].y - elements[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < connectionDistance) {\r\n                    // Opacity based on distance\r\n                    const opacity = 1 - (distance / connectionDistance);\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(elements[i].x, elements[i].y);\r\n                    ctx.lineTo(elements[j].x, elements[j].y);\r\n                    ctx.strokeStyle = `rgba(83, 5, 118, ${opacity * 0.2})`;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Track mouse position\r\n    canvas.addEventListener('mousemove', function(e) {\r\n        mouse.x = e.x;\r\n        mouse.y = e.y;\r\n    });\r\n\r\n    canvas.addEventListener('mouseleave', function() {\r\n        mouse.x = null;\r\n        mouse.y = null;\r\n    });\r\n\r\n    // Animation loop\r\n    function animate() {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        drawConnections();\r\n        \r\n        // Update and draw elements\r\n        for (let i = 0; i < elements.length; i++) {\r\n            elements[i].update();\r\n            elements[i].draw();\r\n        }\r\n        \r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    createCricketElements();\r\n    animate();\r\n}\r\n\r\n// Initialize the cricket background when the DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    setupCricketBackground();\r\n});\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}